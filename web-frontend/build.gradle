apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlin2js'
apply plugin: 'com.moowork.node'

sourceSets {
    main.kotlin.srcDirs += 'src/'
    main.kotlin.srcDirs += 'lib/'
    test.kotlin.srcDirs += 'tests/'
}

buildscript{
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    expectedBy project(':backend')
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

compileKotlin2Js.configure {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.main = 'call'

    kotlinOptions.noStdlib = false
    kotlinOptions.outputFile = "web-frontend/web/js/${project.name}.js"
    kotlinOptions.sourceMap = true
}

compileTestKotlin2Js.configure {
    kotlinOptions.moduleKind = "commonjs"
    kotlinOptions.noStdlib = false
    kotlinOptions.outputFile = "web-frontend/web/js/${project.name}-test.js"
}

node{
    download = true
}

task installTs2kt(type: NpmTask) {
    outputs.dir file("${node.nodeModulesDir}/node_modules/ts2kt/")
    args = ['install', 'ts2kt']
}

task generateHeaders(dependsOn: [installTs2kt]){
    def folder = new File("${projectDir}/headers/")
    def jqueryFile = new File("${projectDir}/headers/jquery.d.ts")
    if (!folder.exists())folder.mkdirs()
    if (!jqueryFile.exists()) {
        new URL('https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/types/jquery/jquery.d.ts').withInputStream{ i -> jqueryFile.withOutputStream{ it << i }}
    }

    (new File("${projectDir}/headers/header.d.ts")).text = jqueryFile.getText()
}

task convertHeaders(type: NodeTask, dependsOn: [installTs2kt, generateHeaders]){
    outputs.dir file('lib/')

    script = file("${node.nodeModulesDir}/node_modules/ts2kt/ts2kt.js")
    args = ["-d", "lib/", "headers/header.d.ts"]
}

task generateJQueryLib{
    outputs.dir file("${projectDir}/web/js/lib/")
    def folder = new File("${projectDir}/web/js/lib/")
    if (!folder.exists()) {
        folder.mkdirs()
    }

    def folder2 = new File("${projectDir}/web/js/lib/jquery")
    if (!folder2.exists()) {
        folder2.mkdirs()
    }

    def f = new File("${projectDir}/web/js/lib/jquery/jquery.js")
    new URL('https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js').withInputStream{ i -> f.withOutputStream{ it << i }}

    def f2 = new File("${projectDir}/web/js/lib/jquery/jqueryui.js")
    new URL('https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js').withInputStream{ i -> f2.withOutputStream{ it << i }}
}

compileKotlin2Js.dependsOn convertHeaders

compileKotlin2Js.doLast {
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "web/js/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }

    generateJQueryLib.execute()
}

task installMocha(type: NpmTask) {
    outputs.dir file("${node.nodeModulesDir}/node_modules/mocha/")
    args = ['install', 'mocha']
}

task installKotlin(type: NpmTask) {
    outputs.dir file("${node.nodeModulesDir}/node_modules/kotlin/")
    args = ['install', 'kotlin']
}

task installKotlinTest(type: NpmTask) {
    outputs.dir file("${node.nodeModulesDir}/node_modules/kotlin-test/")
    args = ['install', 'kotlin-test']
}

task installWebFrontend(type: NpmTask) {
    args = ['install', 'web/']
}

task runMocha(type: NodeTask, dependsOn: [installMocha, installKotlin, installKotlinTest, installWebFrontend]) {
    script = file("node_modules/mocha/bin/mocha")
    args = ["web/js/${project.name}-test.js", "-r", "${project.name}"]
}

test.dependsOn runMocha

clean.doFirst{
    delete 'node_modules/'
    delete 'headers/'
    delete 'lib/'
    delete 'web/js/'
}