apply plugin: 'kotlin-platform-js'
apply plugin: 'com.moowork.node'
apply plugin: 'kotlin2js'

sourceSets {
    main.kotlin.srcDirs += 'src/'
    main.kotlin.srcDirs += 'lib/'
    test.kotlin.srcDirs += 'tests/'
}

repositories {
    mavenCentral()
}

dependencies {
    expectedBy project(':backend')
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.main = 'call'

    kotlinOptions.noStdlib = false
    kotlinOptions.outputFile = "web-frontend/web/js/${project.name}.js"
    kotlinOptions.sourceMap = true
}

build.doLast {
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "web/js/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

node {
    download = true
}

task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
    script = file("node_modules/mocha/bin/mocha")
    args = [compileTestKotlin2Js.outputFile]
}

test.dependsOn runMocha

task installTs2kt(type: NpmTask) {
    args = ['install', 'ts2kt']
}

task generateJQueryHeader(type: NodeTask, dependsOn: [populateNodeModules, installTs2kt]){
    def folder = new File('web-frontend/headers/')
    if (!folder.exists()) {
        folder.mkdirs()
        def f = new File('web-frontend/headers/jquery.d.ts')

        new URL('https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/types/jquery/jquery.d.ts').withInputStream{ i -> f.withOutputStream{ it << i }}
    }

    script = file("node_modules/ts2kt/ts2kt.js")
    args = ["-d", "lib/", "headers/jquery.d.ts"]
}

compileKotlin2Js.dependsOn installTs2kt

compileKotlin2Js.doFirst{
    def f = file('lib/jquery.kt')
    if (!f.exists()){
        generateJQueryHeader.execute()
    }
}